{"version":3,"sources":["components/Certificados.jsx","components/Introduction.jsx","components/Footer.jsx","components/Main.jsx","config/serviceWorker.js","index.js"],"names":["infoImgs","require","getImgUrls","map","url","Carrousel","className","imageUrls","img","index","key","src","alt","title","Introduction","Footer","Main","Certificados","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+gHAIMA,G,MAAWC,EAAQ,KAEnBC,EAAa,WACjB,OAAOF,EAASG,KAAI,qBAAEC,QA0BTC,MAvBf,WAGE,OAFAH,IAGE,yBAAKI,UAAU,uBACb,wBAAIA,UAAU,eAAc,2DAE5B,kBAAC,UAAD,CAASC,UAAWL,KAClB,yBAAKI,UAAU,8CACZN,EAASG,KAAI,SAACK,EAAKC,GAAN,OACZ,yBAAKH,UAAU,YAAYI,IAAKD,GAC9B,kBAAC,iBAAD,CAAgBA,MAAOA,GACrB,yBAAKE,IAAKH,EAAIJ,IAAKQ,IAAKJ,EAAIK,MAAOP,UAAU,4BAE7C,uBAAGA,UAAU,2CAA2CE,EAAIK,e,MCO7DC,MA1Bf,WACE,OACE,oCACE,6BAASR,UAAU,sEACjB,yBACEK,IAPS,mFAQTC,IAAI,eACJN,UAAU,kDAEZ,yBAAKA,UAAU,kBACb,wBAAIA,UAAU,oBAAd,gBACA,uBAAGA,UAAU,OAAb,0WAQA,qDChBKS,EANA,kBACX,4BAAQT,UAAU,cACd,uBAAGA,UAAU,kCAAb,4BCWOU,MAVf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAACC,EAAD,MACA,kBAAC,EAAD,Q,MCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f1af1401.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { RViewer, RViewerTrigger } from \"react-viewerjs\";\r\nimport '../assets/styles/certificates.css';\r\n\r\nconst infoImgs = require(\"../assets/data/infoImgs.json\");\r\n\r\nconst getImgUrls = () => {\r\n  return infoImgs.map(({url}) => url);\r\n}\r\n\r\nfunction Carrousel() {\r\n  getImgUrls();\r\n\r\n  return (\r\n    <div className=\"container mt-5 mb-5\">\r\n      <h4 className=\"text-center\"><strong>Certificados obtenidos</strong></h4>\r\n\r\n      <RViewer imageUrls={getImgUrls()}>\r\n        <div className=\"row row-cols-1 row-cols-sm-2 row-cols-md-3\">\r\n          {infoImgs.map((img, index) => (\r\n            <div className=\"card mb-4\" key={index}>\r\n              <RViewerTrigger index={index}>\r\n                <img src={img.url} alt={img.title} className=\"card-img-top c-pointer\"/>\r\n              </RViewerTrigger>\r\n                <p className=\"card-title text-center bg-light m-0 p-2\">{img.title}</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </RViewer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Carrousel;\r\n","import React from \"react\";\r\nimport '../assets/styles/introduction.css';\r\n\r\nconst urlProfile = \"https://res.cloudinary.com/duo6yoqmy/image/upload/v1599967553/profile_difxb3.jpg\";\r\n\r\nfunction Introduction() {\r\n  return (\r\n    <>\r\n      <article className=\"container position-relative bg-light rounded pl-3 pr-3 text-center\">\r\n        <img\r\n          src={urlProfile}\r\n          alt=\"photoProfile\"\r\n          className=\"rounded-circle position-absolute left top w-8\"\r\n        ></img>\r\n        <div className=\"mt-5 pt-5 pb-4\">\r\n          <h2 className=\"text-center mt-3\">Gary Barzola</h2>\r\n          <p className=\"p-4\">\r\n            Estudiante de Ingeniería en Ciencias Computacionales, con\r\n            conocimientos en varios frameworks y herramientas de desarrollo, me\r\n            gusta el trabajo colaborativo y la buena organización en la\r\n            asignación de tareas específicas, en la actualidad me gusta\r\n            aprovechar mi tiempo libre en extender mis conocimientos en areas\r\n            relacionadas con la tecnología.\r\n          </p>\r\n          <p>Ecuador, Guayaquil</p>\r\n        </div>\r\n      </article>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Introduction;","import React from 'react';\r\n\r\nconst Footer = () => (\r\n    <footer className=\"bg-primary\">\r\n        <p className=\"text-white m-0 p-2 text-center\">The best for the best!</p>\r\n    </footer>\r\n)\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport Certificados from \"./Certificados.jsx\";\r\nimport Introduction from \"./Introduction.jsx\";\r\nimport Footer from \"./Footer.jsx\";\r\n\r\nfunction Main() {\r\n  return (\r\n    <>\r\n      <Introduction />\r\n      <Certificados />\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Main from './components/Main.jsx';\r\nimport './assets/styles/bootstrap.min.css';\r\nimport * as serviceWorker from './config/serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Main />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}